import { map_arr } from "./es_49.js";

describe("ESERCIZIO 49", () => {
    test('TEST 01', () => {
        expect(map_arr([1, 5, 8, 10, 19, 20], 5).toString()).toBe([1, 0, 8, 0, 19, 0].toString());
    });

    test('TEST 02', () => {
        expect(map_arr([
            89, 38, 23, 54, 0,
            48, 19, 93, 14, 94
        ], 6).toString()).toBe([
            89, 38, 23, 0, 0,
            0, 19, 93, 14, 94
        ].toString());
    });

    test('TEST 03', () => {
        expect(map_arr(
            [
                216, 972, 305, 335, 193, 588, 224, 544, 209, 380,
                763, 611, 593, 255, 811, 200, 222, 211, 718, 247,
                404, 144, 863, 134, 412, 447, 605, 443, 216, 973,
                424, 185, 396, 833, 641, 749, 13, 313, 701, 490,
                767, 30, 26, 28, 284, 104, 654, 854, 738, 591,
                631, 786, 468, 414, 163, 698, 127, 146, 922, 794,
                322, 931, 778, 471, 0, 365, 155, 804, 235, 285,
                620, 486, 738, 995, 362, 288, 76, 676, 502, 401,
                265, 431, 138, 582, 374, 937, 370, 619, 179, 558,
                724, 162, 700, 216, 377, 911, 643, 475, 364, 641,
                709, 443, 553, 743, 235, 834, 200, 744, 281, 381,
                988, 887, 389, 733, 367, 482, 263, 0, 195, 528, 38, 31, 910
            ], 57).toString()).toBe(
                [
                    216, 972, 305, 335, 193, 588, 224, 544, 209, 380,
                    763, 611, 593, 255, 811, 200, 222, 211, 718, 247,
                    404, 144, 863, 134, 412, 447, 605, 443, 216, 973,
                    424, 185, 396, 833, 641, 749, 13, 313, 701, 490,
                    767, 30, 26, 28, 284, 104, 654, 854, 738, 591,
                    631, 786, 468, 414, 163, 698, 127, 146, 922, 794,
                    322, 931, 778, 471, 0, 365, 155, 804, 235, 0, 620,
                    486, 738, 995, 362, 288, 76, 676, 502, 401, 265, 431,
                    138, 582, 374, 937, 370, 619, 179, 558, 724, 162, 700,
                    216, 377, 911, 643, 475, 364, 641, 709, 443, 553, 743,
                    235, 834, 200, 744, 281, 381, 988, 887, 389, 733, 367,
                    482, 263, 0, 195, 528, 38, 31, 910
                ].toString());
    });

    test('TEST 04', () => {
        expect(map_arr([
            4432, 7308, 4119, 3242, 7250,
            2974, 5322, 9373, 7068, 7516,
            6240, 580, 2805, 9300, 7120,
            7415, 9545, 1468, 4605, 5193,
            9911, 1788, 8186
        ], 0).toString()).toBe([
            4432, 7308, 4119, 3242, 7250,
            2974, 5322, 9373, 7068, 7516,
            6240, 580, 2805, 9300, 7120,
            7415, 9545, 1468, 4605, 5193,
            9911, 1788, 8186
        ].toString());
    });

    test('TEST 05', () => {
        expect(map_arr(Array(1000000).fill(0).map(e => Math.floor(Math.random() * 10)), 1).toString()).toBe(Array(1000000).fill(0).toString());
    });
});
